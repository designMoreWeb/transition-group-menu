{"ast":null,"code":"// In production, we register a service worker to serve assets from local cache.\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\nvar isLocalhost = Boolean(window.location.hostname === 'localhost' || // [::1] is the IPv6 localhost address.\nwindow.location.hostname === '[::1]' || // 127.0.0.1/8 is considered localhost for IPv4.\nwindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    var publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', function () {\n      var swUrl = \"\".concat(process.env.PUBLIC_URL, \"/service-worker.js\");\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl); // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n\n        navigator.serviceWorker.ready.then(function () {\n          console.log('This web app is being served cache-first by a service ' + 'worker. To learn more, visit https://goo.gl/SC7cgQ');\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker.register(swUrl).then(function (registration) {\n    registration.onupdatefound = function () {\n      var installingWorker = registration.installing;\n\n      installingWorker.onstatechange = function () {\n        if (installingWorker.state === 'installed') {\n          if (navigator.serviceWorker.controller) {\n            // At this point, the old content will have been purged and\n            // the fresh content will have been added to the cache.\n            // It's the perfect time to display a \"New content is\n            // available; please refresh.\" message in your web app.\n            console.log('New content is available; please refresh.');\n          } else {\n            // At this point, everything has been precached.\n            // It's the perfect time to display a\n            // \"Content is cached for offline use.\" message.\n            console.log('Content is cached for offline use.');\n          }\n        }\n      };\n    };\n  }).catch(function (error) {\n    console.error('Error during service worker registration:', error);\n  });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl).then(function (response) {\n    // Ensure service worker exists, and that we really are getting a JS file.\n    if (response.status === 404 || response.headers.get('content-type').indexOf('javascript') === -1) {\n      // No service worker found. Probably a different app. Reload the page.\n      navigator.serviceWorker.ready.then(function (registration) {\n        registration.unregister().then(function () {\n          window.location.reload();\n        });\n      });\n    } else {\n      // Service worker found. Proceed as normal.\n      registerValidSW(swUrl);\n    }\n  }).catch(function () {\n    console.log('No internet connection found. App is running in offline mode.');\n  });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(function (registration) {\n      registration.unregister();\n    });\n  }\n}","map":{"version":3,"sources":["/Users/Divster/Code/ReactJS/transition-group-menu/regular-menu/src/registerServiceWorker.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","register","process","env","NODE_ENV","navigator","publicUrl","URL","PUBLIC_URL","origin","addEventListener","swUrl","checkValidServiceWorker","serviceWorker","ready","then","console","log","registerValidSW","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","catch","error","fetch","response","status","headers","get","indexOf","unregister","reload"],"mappings":"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","sourcesContent":["// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n    if (\n        process.env.NODE_ENV === 'production' &&\n        'serviceWorker' in navigator\n    ) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            process.env.PUBLIC_URL,\n            window.location\n        );\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${\n        process.env.PUBLIC_URL\n      }/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Lets check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://goo.gl/SC7cgQ'\n                    );\n                });\n            } else {\n                // Is not local host. Just register service worker\n                registerValidSW(swUrl);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker =\n                    registration.installing;\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the old content will have been purged and\n                            // the fresh content will have been added to the cache.\n                            // It's the perfect time to display a \"New content is\n                            // available; please refresh.\" message in your web app.\n                            console.log(\n                                'New content is available; please refresh.'\n                            );\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\n                                'Content is cached for offline use.'\n                            );\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error(\n                'Error during service worker registration:',\n                error\n            );\n        });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            if (\n                response.status === 404 ||\n                response.headers\n                .get('content-type')\n                .indexOf('javascript') === -1\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(\n                    registration => {\n                        registration.unregister().then(() => {\n                            window.location.reload();\n                        });\n                    }\n                );\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(\n            registration => {\n                registration.unregister();\n            }\n        );\n    }\n}\n"]},"metadata":{},"sourceType":"module"}